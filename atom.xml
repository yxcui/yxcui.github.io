<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yxcui&#39;s Little Stack</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yxcui.github.io/"/>
  <updated>2017-08-01T06:56:19.648Z</updated>
  <id>http://yxcui.github.io/</id>
  
  <author>
    <name>yxcui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yxcui.github.io/2017/08/01/msysgit%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://yxcui.github.io/2017/08/01/msysgit安装配置/</id>
    <published>2017-08-01T06:56:19.333Z</published>
    <updated>2017-08-01T06:56:19.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="msysgit安装配置"><a href="#msysgit安装配置" class="headerlink" title="msysgit安装配置"></a>msysgit安装配置</h1><p>标签（空格分隔）： Github</p>
<hr>
<p>[TOC]</p>
<h3 id="一、Github-简介"><a href="#一、Github-简介" class="headerlink" title="一、Github 简介"></a>一、Github 简介</h3><p>Github是一款版本控制系统，但与SVN等不同的是，它是一款分布式版本控制系统。<br><strong>集中式版本控制系统</strong>，版本库是集中存放在中央服务器的，在工作的时候，各工作机需要从中央服务器上取得最新的版本，等到自己的版本更新后，再推送给中央服务器进行更新；最大的缺点就是必须连接互联网才能工作。<br><strong>分布式版本控制系统</strong>，每个工作机都是一个完整的版本库，在工作更新的时候是不需要联网的，因为版本库就是在本机上，当多人对同一文件进行了更改，只需要各自互相推送就能知道其他人在哪些地方进行了修改。</p>
<h3 id="二、msysgit-配置"><a href="#二、msysgit-配置" class="headerlink" title="二、msysgit 配置"></a>二、msysgit 配置</h3><h4 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h4><p><a href="https://git-for-windows.github.io/" target="_blank" rel="external">msysgit 下载页面</a><br>安装按照默认选项安装即可。</p>
<h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h4><p>（1） 设置用户名和Email地址<br>安装完成后打开 Git Bash，出现的是类似命令行的窗口，所有的Git命令都是在该窗口下完成。</p>
<blockquote>
<ul>
<li>设置用户名和Email地址<ul>
<li>user.name: <code>git config --global user.name &quot;yxcui&quot;</code></li>
<li>user.email: <code>git config --global user.email &quot;email@eg.com&quot;</code></li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>注：</strong><br><code>git config</code> 命令是用来标识每个计算机的，因为Git是分布式管理的；<br>另外其中的<strong>–global</strong> 参数表示本地计算机上所有的Git Repository都会使用该配置，当然也是可以对某个仓库指定不同的用户名和Email地址。</p>
<p>（2）配置SSH keys访问Github</p>
<blockquote>
<ul>
<li><p>检查本机是否有ssh keys设置</p>
<ul>
<li><code>$ cd ~/.ssh</code> 或 <code>$ cd .ssh</code>；</li>
</ul>
<ul>
<li>若提示”No such file or directory.”，则没有.ssh文件夹，若直接进入~/.ssh路径下，则存在.ssh文件夹；</li>
</ul>
<ul>
<li><code>$ ls</code> 查看当前路径文件；<code>$ rm *</code> 删除所有文件。</li>
</ul>
</li>
<li><p>使用Git Bash生成新的ssh key</p>
<ul>
<li><code>$ cd ~</code>  #保证当前路径在”~”下；</li>
</ul>
<ul>
<li><code>$ ssh-keygen -t rsa -C &quot;email@eg.com&quot;</code>   #建议填写自己真实有效的邮箱地址</li>
</ul>
<ul>
<li>一路回车 “Your identification has been saved in /c/Users/giscui/.ssh/id_rsa.”  #秘钥<br>“Your public key has been saved in /c/Users/giscui/.ssh/id_rsa.pub.”   #公钥；</li>
<li>本机完成ssh key的设置，存放在<code>&quot;c:/Users/giscui/.ssh/id_rsa.pub&quot;</code>下。</li>
</ul>
</li>
<li><p>添加ssh key到Github</p>
<ul>
<li><code>Setting →SSH keys →Add SSH key</code>；</li>
<li>将id_rsa.pub 下的内容复制到key 文本框中完成添加ssh key。</li>
</ul>
</li>
<li><p>测试ssh key是否设置成功</p>
<ul>
<li><code>$ ssh -T git@github.com</code>；</li>
<li>出现<code>&quot;Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.&quot;</code>表示成功。</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;msysgit安装配置&quot;&gt;&lt;a href=&quot;#msysgit安装配置&quot; class=&quot;headerlink&quot; title=&quot;msysgit安装配置&quot;&gt;&lt;/a&gt;msysgit安装配置&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： Github&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[TOC]
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Github+Hexo搭建博客网站---基础环境</title>
    <link href="http://yxcui.github.io/2017/03/20/Github+Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99---%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/"/>
    <id>http://yxcui.github.io/2017/03/20/Github+Hexo搭建博客网站---基础环境/</id>
    <published>2017-03-20T06:37:39.840Z</published>
    <updated>2017-03-21T02:38:35.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>记录博客的地方的确很多，比如CSDN、博客园、简书和作业部落等，但是这些好像不易百度到或者想直接去找自己的资料，所以如果有一个公共接口进入，能够将所有的记录内容都能访问到，就显得很easy，这就可以通过一个域名进入博客网站主页，然后就很简单找到自己记录过的笔记和心得，是个很不错的选择，还能装一装X，拥有自己的<a href="https://yxcui.github.io/">独家域名</a>。<br>以后还可以将自己做的一些工作放到博客上，比如做的一些数据分析工作等。</p>
<h3 id="一、所需材料"><a href="#一、所需材料" class="headerlink" title="一、所需材料"></a>一、所需材料</h3><h4 id="1-Git-安装"><a href="#1-Git-安装" class="headerlink" title="1. Git 安装"></a>1. Git 安装</h4><p>此前总结过<a href="https://zybuluo.com/ecnu-cyx/note/692971" target="_blank" rel="external">Git的安装和配置过程</a>。</p>
<h4 id="2-Node-js-安装"><a href="#2-Node-js-安装" class="headerlink" title="2. Node.js 安装"></a>2. Node.js 安装</h4><p>菜鸟教程上有很好的<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">Node.js安装和配置教程</a>。</p>
<h4 id="3-Hexo"><a href="#3-Hexo" class="headerlink" title="3. Hexo"></a>3. Hexo</h4><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds. <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">中文帮助文档</a></p>
<h3 id="二、Hexo安装与配置"><a href="#二、Hexo安装与配置" class="headerlink" title="二、Hexo安装与配置"></a>二、Hexo安装与配置</h3><h4 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1. 安装Hexo"></a>1. 安装Hexo</h4><p>在任意处打开Git Bash，执行<code>$ npm install -g hexo-cli</code><br>【注：npm命令是集成在新版的node.js中的，可以输入<code>npm -v</code>来查看npm的版本，即node.js的版本，出现版本号说明安装成功。npm可以从服务器下载第三方的包和命令行程序到本地，同样可以将自己写的包和命令行程序上传到NPM服务器上】</p>
<h4 id="2-创建本地存放博客目录"><a href="#2-创建本地存放博客目录" class="headerlink" title="2. 创建本地存放博客目录"></a>2. 创建本地存放博客目录</h4><p>选择一个本地目录，空白处右键选择Git Bash Here，执行：</p>
<blockquote>
<ul>
<li><code>$ hexo init &lt;folder&gt;</code>  #创建目录并初始化</li>
<li><code>$ cd &lt;folder&gt;</code>  #进入创建的文件夹</li>
<li><code>$ npm install</code>  #安装依赖包</li>
<li>目录结构如下：<ul>
<li>.<br>  ├── _config.yml<br>  ├── package.json<br>  ├── .gitignore<br>  ├── node_modules<br>  ├── scaffolds<br>  ├── source<br>  |   ├── _drafts<br>  |   └── _posts<br>  └── themes</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="3-启动本地服务"><a href="#3-启动本地服务" class="headerlink" title="3. 启动本地服务"></a>3. 启动本地服务</h4><p>执行以下命令启动本地服务：</p>
<blockquote>
<ul>
<li><code>$ hexo generate</code>  #生成静态文件</li>
<li><code>$ hexo server</code>  #启动本地服务器</li>
</ul>
</blockquote>
<p>如果启动过程中没有报错，此时可以用浏览器访问<code>http://localhost:4000/</code>，会出现一个Hello World的博客页面，hexo使用的默认主题是landscape，而且此时的服务是本地启动的，别人并不能看到。<br>【注：更改本地服务端口命令<code>hexo server -p &lt;port&gt;</code>】</p>
<h4 id="4-与Github连接"><a href="#4-与Github连接" class="headerlink" title="4. 与Github连接"></a>4. 与Github连接</h4><blockquote>
<ol>
<li><p>首先在Github上创建版本库New Repository<br>注意：<strong>repository的名字必须为<code>username.github.io</code>，username即为Github的账户名</strong>，我的个人地址为<code>https://yxcui.github.io</code>，如果将Repository name随意填写，是不能访问的，返回的是404的错误页面。</p>
</li>
<li><p>配置站点文件<code>_config.yml</code><br>站点配置文件位于博客目录下<code>D:\Hexo\_config.yml</code>，，找到<code>deploy</code>属性，修改为如下：</p>
<ul>
<li>注：冒号后有一位空格<br><code>deploy:
  type: git  #推送方式
  repository: https://github.com/yxcui/yxcui.github.io.git  #Github上创建的版本库目录
  branch: master  #推送的版本库分支</code></li>
</ul>
</li>
<li><p>将服务部署到Github上</p>
<ul>
<li><code>$ hexo clean</code></li>
</ul>
<ul>
<li><code>$ hexo g</code></li>
</ul>
<ul>
<li><code>$ hexo d</code>  ##<code>hexo d</code>命令第一次会要求输入用户名和密码，即Github的用户名和秘密<br>【注：如果出现错误”<code>ERROR Deployer not found : github</code>“，先运行<code>$ npm install hexo-deployer-git --save</code>，在执行上述命令】</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="最后访问"><a href="#最后访问" class="headerlink" title="最后访问"></a>最后访问</h3><p>个人主页：<a href="https://yxcui.github.io">https://yxcui.github.io</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;记录博客的地方的确很多，比如CSDN、博客园、简书和作业部落等，但是这些好像不易百度到或者想直接去找自己的资料，所以如果有一
    
    </summary>
    
    
      <category term="Github" scheme="http://yxcui.github.io/tags/Github/"/>
    
  </entry>
  
</feed>
